// Media query

// Media query mixin
// Usage:
// @include mq(lg) {
//   ..medium and up styles
// }
@mixin mq($name) {
  // Retrieves the value from the key
  $value: map-get($media-queries, $name);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: rem($value)) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$media-query}`. "
      + "Please make sure it is defined in `$media-queries` map.";
  }
}

// Responsive container

@mixin container {
  padding-right: $gutter-spacing-sm;
  padding-left: $gutter-spacing-sm;

  @include mq(lg) {
    padding-right: $gutter-spacing;
    padding-left: $gutter-spacing;
  }
}

// Striped background
@mixin stripes($color, $height: 10px) {
  height: $height;
  background-image: repeating-linear-gradient(
    -75deg,
    $white 0 5px,
    $color 5px 10px
  );
}

%arrow-icon {
  content: "";
  display: block;
  position: absolute;
  z-index: 10;
  top: 50%;
  width: 8px;
  height: 8px;
  box-shadow: inset -1px 1px 0 0 #2b648b;
  transform-origin: 50% 50%;
  transition: all 0.2s ease-in-out;
}

%arrow-line {
  content: "";
  display: block;
  position: absolute;
  top: calc(50% + 1px);
  width: 1rem;
  height: 1px;
  background-color: #2b648b;
  transition: all 0.2s ease-in-out;
}

@mixin pagination-arrows($direction: left) {
  $opposite: left;
  @if $direction == left {
    $opposite: right;
  }
  padding-#{$direction}: 1.5rem;

  &::before {
    @extend %arrow-icon;
    #{$direction}: 1px;

    @if $direction == left {
      transform: translateY(-2.5px) rotate(-135deg);
    } @else {
      transform: translateY(-2.5px) rotate(45deg);
    }
  }

  &::after {
    @extend %arrow-line;
    #{$direction}: 0;
  }

  &:not(:disabled):hover i {
    #{$opposite}: calc(100% + 1rem);

    &::after {
      width: calc(2rem - 1px);
      #{$opposite}: -1rem;
    }
  }
}
